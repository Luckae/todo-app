[{"/Users/macbookpro/Documents/todo-frontend/src/index.js":"1","/Users/macbookpro/Documents/todo-frontend/src/App.js":"2","/Users/macbookpro/Documents/todo-frontend/src/pages/Login.js":"3","/Users/macbookpro/Documents/todo-frontend/src/pages/Register.js":"4","/Users/macbookpro/Documents/todo-frontend/src/components/BaseUrl.js":"5","/Users/macbookpro/Documents/todo-frontend/src/pages/Todos.js":"6"},{"size":509,"mtime":1680660413006,"results":"7","hashOfConfig":"8"},{"size":619,"mtime":1680941678225,"results":"9","hashOfConfig":"8"},{"size":4420,"mtime":1680941401729,"results":"10","hashOfConfig":"8"},{"size":5141,"mtime":1680746783254,"results":"11","hashOfConfig":"8"},{"size":75,"mtime":1680745395711,"results":"12","hashOfConfig":"8"},{"size":11600,"mtime":1680755156002,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1u4y1xl",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Users/macbookpro/Documents/todo-frontend/src/index.js",[],[],[],"/Users/macbookpro/Documents/todo-frontend/src/App.js",["36","37","38"],[],"/Users/macbookpro/Documents/todo-frontend/src/pages/Login.js",["39","40","41","42"],[],"import React, { Component } from 'react';\nimport { withRouter, Router, NavLink, Link } from 'react-router-dom';\nimport '../App.css';\nimport { baseUrl } from '../components/BaseUrl';\nimport Swal from \"sweetalert2\";\nimport logo from '../assets/images/logo.png';\n\nclass Login extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      isLoading: false,\n      isDisabled: false\n    }\n  }\n\n  validateForm = () => {\n    const { email, password } = this.state;\n    if(email.length == 0){\n      Swal.fire({\n        title: \"Empty!\",\n        text: \"Please enter username\",\n        icon: \"error\",\n        confirmButtonText: \"OK\",\n      });\n    }else if(password.length == 0){\n      Swal.fire({\n        title: \"Empty!\",\n        text: \"Please enter password\",\n        icon: \"error\",\n        confirmButtonText: \"OK\",\n      });\n    }else{\n      this.doLogin();\n    }\n  }\n\n  doLogin = async () => {\n    const { email, password } = this.state;\n    this.setState({isLoading: true, isDisabled: true})\n    let req = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: `${email}`,\n        password: `${password}`,\n\n      }),\n    };\n    await fetch(`${baseUrl}appAcademy/login`, req)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        // console.warn(responseJson);\n        if(responseJson.msg === \"Logged in!\"){\n          localStorage.setItem(\"token\", responseJson.token)\n          localStorage.setItem(\"name\", responseJson.user.name)\n          this.setState({isLoading: false, isDisabled: false})\n          Swal.fire({\n            title: \"Success\",\n            text: 'Login successful!',\n            icon: \"success\",\n            confirmButtonText: \"OK\",\n          }).then(()=> {\n            this.props.history.push(\"/todo\")\n          })\n        }else{\n          this.setState({isLoading: false, isDisabled: false})\n          Swal.fire({\n            title: \"Error!\",\n            text: 'An error occurred. Please try again later.',\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({isLoading: false, isDisabled: false})\n        Swal.fire({\n          title: \"Error!\",\n          text: error.message,\n          icon: \"error\",\n          confirmButtonText: \"OK\",\n        });\n      })\n     }\n\n\n  render(){\n    const { isLoading, isDisabled } = this.state;\n    return(\n      <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h2 className=\"text-center text-dark mt-5\">Account Login</h2>\n          <div className=\"text-center mb-5 text-dark\">App Academy</div>\n          <div className=\"card my-5\">\n\n            <form className=\"card-body cardbody-color p-lg-5\">\n\n              <div className=\"text-center\">\n                <img src={logo} className=\"img-fluid profile-image-pic img-thumbnail my-3\"\n                  width=\"200px\" alt=\"logo\" />\n              </div>\n\n              <div className=\"mb-3\">\n                <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"email\"\n                  placeholder=\"Email\"\n                  onChange={(e) =>\n                    this.setState({ email: e.target.value })\n                  }\n                  />\n              </div>\n              <div className=\"mb-3\">\n                <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"password\"\n                onChange={(e) =>\n                  this.setState({ password: e.target.value })\n                }\n                />\n              </div>\n              <div className=\"text-center\"><button disabled={isDisabled} onClick={(e) => this.validateForm()} type=\"button\" class=\"btn btn-danger font-weight-bold px-5 mb-5 w-100\">\n              {isLoading ? (\n                'loading ...'\n              ) : (\n                \"Login\"\n              )}\n              </button></div>\n              <div id=\"emailHelp\" className=\"form-text text-center mb-5 text-dark\">Not\n                Registered? <Link to=\"/register\" className=\"text-dark fw-bold\"> Create an\n                  Account</Link>\n              </div>\n            </form>\n          </div>\n\n        </div>\n      </div>\n    </div>\n\n    )\n  }\n}\n\nexport default withRouter(Login)\n","/Users/macbookpro/Documents/todo-frontend/src/pages/Register.js",["43","44","45"],[],"import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { baseUrl } from '../components/BaseUrl';\nimport '../App.css';\nimport Swal from \"sweetalert2\";\nimport logo from '../assets/images/logo.png';\n\nclass Register extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n      isLoading: false,\n      isDisabled: false\n    }\n  }\n\n  validateForm = () => {\n    const { username, email, password } = this.state;\n    if(username.length == 0){\n      Swal.fire({\n        title: \"Empty!\",\n        text: \"Please enter username\",\n        icon: \"error\",\n        confirmButtonText: \"OK\",\n      });\n    }else if(email.length == 0){\n      Swal.fire({\n        title: \"Empty!\",\n        text: \"Please enter email\",\n        icon: \"error\",\n        confirmButtonText: \"OK\",\n      });\n    }else if(password.length == 0){\n      Swal.fire({\n        title: \"Empty!\",\n        text: \"Please enter password\",\n        icon: \"error\",\n        confirmButtonText: \"OK\",\n      });\n    }else{\n      this.doRegister();\n    }\n  }\n\n  doRegister = async () => {\n    const { username, email, password } = this.state;\n    this.setState({isLoading: true, isDisabled: true})\n    let req = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: `${username}`,\n        email: `${email}`,\n        password: `${password}`,\n\n      }),\n    };\n    await fetch(`${baseUrl}appAcademy/register`, req)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        // console.warn(responseJson);\n        if(responseJson.msg === \"This email is already in use\"){\n          this.setState({isLoading: false, isDisabled: false})\n          Swal.fire({\n            title: \"Duplicate Attempt\",\n            text: 'Email is already taken',\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          })\n        }else if(responseJson.msg === \"Registration successful!\"){\n          Swal.fire({\n            title: \"Success\",\n            text: 'Registration successful!',\n            icon: \"success\",\n            confirmButtonText: \"OK\",\n          }).then(()=> {\n            this.props.history.push(\"/login\")\n          })\n        }else{\n          this.setState({isLoading: false, isDisabled: false})\n          Swal.fire({\n            title: \"Error!\",\n            text: 'An error occurred. Please try again later.',\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({isLoading: false, isDisabled: false})\n        Swal.fire({\n          title: \"Error!\",\n          text: error.message,\n          icon: \"error\",\n          confirmButtonText: \"OK\",\n        });\n      })\n     }\n\n\n  render(){\n    const { isLoading, isDisabled } = this.state;\n    return(\n      <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <h2 className=\"text-center text-dark mt-5\">Account Registration</h2>\n          <div className=\"text-center mb-5 text-dark\">App Academy</div>\n          <div className=\"card my-5\">\n\n            <form className=\"card-body cardbody-color p-lg-5\">\n\n              <div className=\"text-center\">\n                <img src={logo} className=\"img-fluid profile-image-pic img-thumbnail my-3\"\n                  width=\"200px\" alt=\"logo\" />\n              </div>\n\n              <div className=\"mb-3\">\n                <input type=\"text\" className=\"form-control\" id=\"Username\" aria-describedby=\"Username\"\n                  placeholder=\"Username\"\n                  onChange={(e) =>\n                    this.setState({ username: e.target.value })\n                  }\n                  />\n              </div>\n              <div className=\"mb-3\">\n                <input type=\"text\" className=\"form-control\" id=\"email\" aria-describedby=\"Email\"\n                  placeholder=\"Email\"\n                  onChange={(e) =>\n                    this.setState({ email: e.target.value })\n                  }\n                  />\n              </div>\n              <div className=\"mb-3\">\n                <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"password\"\n                onChange={(e) =>\n                  this.setState({ password: e.target.value })\n                }\n                />\n              </div>\n              <div className=\"text-center\"><button type=\"button\" disabled={isDisabled} onClick={(e) => this.validateForm()} class=\"btn btn-danger font-weight-bold px-5 mb-5 w-100\">\n              {isLoading ? (\n                'loading ...'\n              ) : (\n                \"Create Account\"\n              )}\n              </button></div>\n              <div id=\"emailHelp\" className=\"form-text text-center mb-5 text-dark\">Already\n                Registered? <Link to=\"/login\" class=\"text-dark fw-bold\">Login</Link>\n              </div>\n            </form>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default withRouter(Register)\n","/Users/macbookpro/Documents/todo-frontend/src/components/BaseUrl.js",[],[],"/Users/macbookpro/Documents/todo-frontend/src/pages/Todos.js",["46"],[],"import React, { Component } from 'react';\nimport logo from '../assets/images/logo.png';\nimport { baseUrl } from '../components/BaseUrl';\nimport Swal from \"sweetalert2\";\n\nclass Todos extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      tasks: [],\n      item: \"\",\n      isAddingItem: false,\n      isFetchingTasks: false,\n      isUpdatingStatus: false,\n      isRemovingItem: false,\n      postsPerPage: 10,\n      currentPage: 1,\n    }\n  }\n\n  checkToken = () => {\n    if(!localStorage.getItem(\"token\")){\n      this.props.history.push(\"/login\")\n    }\n  }\n\n  logout = () => {\n    localStorage.clear()\n    if(localStorage.getItem(\"token\") === null) {\n      this.props.history.push(\"/login\")\n    }\n  }\n\n  componentDidMount(){\n    this.checkToken();\n    this.getTodoList()\n  }\n\n\n  //=========================================\n    //START OF UPDATE TASK\n  //=========================================\n  updateTask = async (id) => {\n    let params = id.split(\",\")\n    this.setState({isUpdatingStatus: true})\n    let req = {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: `${params[1]}`,\n        description: null,\n        completed: true,\n      }),\n    };\n    await fetch(`${baseUrl}todoApp/tasks/${params[0]}`, req)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.warn(responseJson);\n        if(responseJson && responseJson.id){\n          this.setState({isUpdatingStatus: false, isDisabled: false})\n          Swal.fire({\n            title: \"Success\",\n            text: 'Status updated successfully!',\n            icon: \"success\",\n            confirmButtonText: \"OK\",\n          }).then(() => {\n            window.location.reload()\n          })\n        }else{\n          this.setState({isUpdatingStatus: false, isDisabled: false})\n          Swal.fire({\n            title: \"Error!\",\n            text: 'An error occurred. Please try again later.',\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({isUpdatingStatus: false, isDisabled: false})\n        Swal.fire({\n          title: \"Error!\",\n          text: error.message,\n          icon: \"error\",\n          confirmButtonText: \"OK\",\n        });\n      })\n  }\n  //=========================================\n    //END OF UPDATE TASK\n  //=========================================\n\n  //=========================================\n    //START OF DELETE TASK\n  //=========================================\n  deleteTask = (id) => {\n    this.setState({isRemovingItem: true})\n    const url = `${baseUrl}todoApp/tasks/${id}`;\n    fetch(url, {\n      method: 'DELETE',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then(res => res.json())\n      .then(res => {\n        // console.warn(res);\n        if(res.message === \"Task deleted\"){\n            this.setState({isRemovingItem: false});\n          Swal.fire({\n            title: \"Success\",\n            text: \"Task removed successfully\",\n            icon: \"success\",\n            confirmButtonText: \"OK\",\n          }).then(() => {\n              window.location.reload()\n          })\n        }else{\n          Swal.fire({\n            title: \"Error\",\n            text: \"An error occurred, please try again\",\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          })\n          this.setState({isRemovingItem: false});\n        }\n      })\n      .catch(error => {\n        this.setState({isRemovingItem: false});\n        alert(error);\n      });\n  }\n  //=========================================\n    //END OF DELETE TASK\n  //=========================================\n\n  //=========================================\n    //START OF GET ALL TASK\n  //=========================================\n  getTodoList = async () => {\n    this.setState({ isFetchingTasks: true})\n    let obj = {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    await fetch(`${baseUrl}todoApp/tasks`, obj)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        // console.warn(responseJson);\n        if (responseJson) {\n            this.setState({ tasks: responseJson, isFetchingTasks: false });\n          }else{\n            this.setState({ isFetchingTasks: false })\n            Swal.fire({\n              title: \"Error!\",\n              text: \"Could not retrieve todo list. Please try again later\",\n              icon: \"error\",\n              confirmButtonText: \"OK\",\n            })\n          }\n      })\n      .catch((error) => {\n        this.setState({ isFetchingTasks: false })\n        Swal.fire({\n          title: \"Error!\",\n          text: error.message,\n          icon: \"error\",\n          confirmButtonText: \"OK\",\n        });\n      });\n  }\n\n  //=========================================\n    //END OF GET ALL TASK\n  //=========================================\n\n  showTasks = () => {\n    const { postsPerPage, currentPage, isRemovingItem, tasks } = this.state;\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = parseInt(indexOfLastPost) - parseInt(postsPerPage);\n    const currentPosts = tasks.slice(indexOfFirstPost, indexOfLastPost);\n    try {\n      return currentPosts.map((item, index) => {\n        return (\n          <tr>\n         <td className=\"text-xs font-weight-bold\">{index +1}</td>\n         <td className=\"text-xs text-capitalize font-weight-bold\">{item.title}</td>\n         <td className={item.completed.toString() === \"true\" ? 'badge bg-success mt-3' : \"badge bg-warning mt-3\" }>{item.completed.toString()}</td>\n         <td><button className=\"btn btn-success\" id={item.id} onClick={() => this.updateTask(`${item.id}, ${item.title}`)}>Update</button></td>\n         <td><button className=\"btn btn-danger\" id={item.id} onClick={() => this.deleteTask(`${item.id}`)}>Delete</button></td>\n         </tr>\n          );\n      });\n    } catch (e) {\n      // Swal.fire({\n      //   title: \"Error\",\n      //   text: e.message,\n      //   type: \"error\",\n      // })\n    }\n  }\n\n  //=========================================\n    //START OF PAGINATION\n  //=========================================\n  showPagination = () => {\n    const { postsPerPage, tasks } = this.state;\n    const pageNumbers = [];\n    const totalPosts = tasks.length;\n    for(let i = 1; i<= Math.ceil(totalPosts/postsPerPage); i++){\n      pageNumbers.push(i)\n    }\n\n   const paginate = (pageNumbers) => {\n     this.setState({currentPage: pageNumbers})\n   }\n    return(\n      <nav>\n      <ul className=\"pagination mt-4\" style={{float: 'right', position: 'relative', right: 54}}>\n      {pageNumbers.map(number => (\n        <li key={number} className={this.state.currentPage === number ? 'page-item active' : 'page-item'}>\n        <button onClick={()=> paginate(number)} className=\"page-link\">\n          { number }\n        </button>\n       </li>\n     ))}\n      </ul>\n      </nav>\n    )\n  }\n  //=========================================\n    //END OF PAGINATION\n  //=========================================\n\n\n  //=========================================\n    // START OF CREATE TODO TASK\n  //=========================================\n\n  createTodo = async () => {\n    const { item } = this.state;\n    this.setState({isAddingItem: true, isDisabled: true})\n    let req = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: `${item}`,\n        description: \"hello\",\n        completed: false,\n      }),\n    };\n    await fetch(`${baseUrl}todoApp/tasks`, req)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        // console.warn(responseJson);\n        if(responseJson){\n          this.setState({isAddingItem: false, isDisabled: false})\n          Swal.fire({\n            title: \"Success\",\n            text: 'Task added successfully!',\n            icon: \"success\",\n            confirmButtonText: \"OK\",\n          }).then(() => {\n            window.location.reload()\n          })\n        }else{\n          this.setState({isAddingItem: false, isDisabled: false})\n          Swal.fire({\n            title: \"Error!\",\n            text: 'An error occurred. Please try again later.',\n            icon: \"error\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({isAddingItem: false, isDisabled: false})\n        Swal.fire({\n          title: \"Error!\",\n          text: error.message,\n          icon: \"error\",\n          confirmButtonText: \"OK\",\n        });\n      })\n     }\n     //=========================================\n       //END OF CREATE TODO TASK\n     //=========================================\n\n\n\n\n  render(){\n    const { isAddingItem, isUpdatingStatus, isRemovingItem, isFetchingTasks } = this.state;\n    return(\n      <div className=\"container\">\n      <div className=\"text-center\">\n        <img src={logo} className=\"img-fluid profile-image-pic img-thumbnail my-3\"\n          width=\"200px\" alt=\"logo\" />\n      </div>\n      <div className=\"info-container\">\n      <div className=\"user-name\">\n      <h2>Hello {`${localStorage.getItem(\"name\")}`}</h2>\n      </div>\n      <div className=\"user-name mb-2\">\n      <button className=\"btn btn-danger\" onClick={(e) => this.logout()} style={{ fontSize: 18 }}>Logout</button>\n      </div>\n      </div>\n      <div className=\"todo-container\">\n      <div className=\"todo-app\">\n        <form className=\"add-todo-form\">\n          <input className=\"add-todo-input\" type=\"text\" placeholder=\"Add item\" onChange={(e) =>\n            this.setState({ item: e.target.value })\n          } />\n          <button type=\"button\" onClick={(e) => this.createTodo()} className=\"add-todo-btn\">\n          {isAddingItem ? (\n            'adding item ...'\n          ) : (\n            \"Add\"\n          )}\n          </button>\n        </form>\n\n        <div className=\"container-fluid py-4\">\n        <div className=\"table-responsive p-0 pb-2\">\n          {isRemovingItem && <p className=\"text-center text-danger\">Removing item ...</p>}\n          {isUpdatingStatus && <p className=\"text-center text-success\">Updating Status ...</p>}\n      <table className=\"table align-items-center justify-content-center mb-0\">\n          <thead>\n              <tr>\n              <th className=\"text-uppercase text-secondary text-sm font-weight-bolder opacity-7 ps-2\">S/N</th>\n              <th className=\"text-uppercase text-secondary text-sm font-weight-bolder opacity-7 ps-2\">Task</th>\n              <th className=\"text-uppercase text-secondary text-sm font-weight-bolder opacity-7 ps-2\">Completed</th>\n              <th className=\"text-uppercase text-secondary text-sm font-weight-bolder opacity-7 ps-2\">Update</th>\n              <th className=\"text-uppercase text-secondary text-sm font-weight-bolder opacity-7 ps-2\">Delete</th>\n              </tr>\n          </thead>\n          {isFetchingTasks ? <div style={{ position: 'relative', top: 10, left: 250}} class=\"spinner-border text-success\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div> :\n          <tbody>\n             {this.showTasks()}\n          </tbody>\n        }\n          </table>\n          </div>\n          <div style={{float: 'right'}}>\n          {this.showPagination()}\n          </div>\n          </div>\n\n\n\n      </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default Todos;\n",{"ruleId":"47","severity":1,"message":"48","line":2,"column":10,"nodeType":"49","messageId":"50","endLine":2,"endColumn":23},{"ruleId":"47","severity":1,"message":"51","line":2,"column":25,"nodeType":"49","messageId":"50","endLine":2,"endColumn":31},{"ruleId":"47","severity":1,"message":"52","line":2,"column":60,"nodeType":"49","messageId":"50","endLine":2,"endColumn":68},{"ruleId":"47","severity":1,"message":"51","line":2,"column":22,"nodeType":"49","messageId":"50","endLine":2,"endColumn":28},{"ruleId":"47","severity":1,"message":"53","line":2,"column":30,"nodeType":"49","messageId":"50","endLine":2,"endColumn":37},{"ruleId":"54","severity":1,"message":"55","line":22,"column":21,"nodeType":"56","messageId":"57","endLine":22,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":29,"column":30,"nodeType":"56","messageId":"57","endLine":29,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":22,"column":24,"nodeType":"56","messageId":"57","endLine":22,"endColumn":26},{"ruleId":"54","severity":1,"message":"55","line":29,"column":27,"nodeType":"56","messageId":"57","endLine":29,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":36,"column":30,"nodeType":"56","messageId":"57","endLine":36,"endColumn":32},{"ruleId":"47","severity":1,"message":"58","line":186,"column":40,"nodeType":"49","messageId":"50","endLine":186,"endColumn":54},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Navigate' is defined but never used.","'NavLink' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isRemovingItem' is assigned a value but never used."]